
########### CodePipeline Role #####################################
data "aws_iam_policy_document" "codepipeline_assume_role_policy" {
  statement {
    effect  = "Allow"
    actions = ["sts:AssumeRole"]

    principals {
      type        = "Service"
      identifiers = ["codepipeline.amazonaws.com","codebuild.amazonaws.com","iam.amazonaws.com","codedeploy.amazonaws.com"]
    }
  }
}

resource "aws_iam_role" "codepipeline_role" {
  name = format("%s-%s-%s-codepipeline-role", var.application, module.adl_globals.environment,var.codepipelinename)
  path               = "/"
  tags               = var.tags
  assume_role_policy = data.aws_iam_policy_document.codepipeline_assume_role_policy.json
}

data "aws_iam_policy_document" "codepipeline_role_policy_document" {

  statement {
      effect = "Allow"
      actions = [
          "kms:Encrypt",
          "kms:Decrypt",
          "kms:GenerateDataKey",
          "kms:GenerateDataKey*"                
        ]
      resources = [
        "arn:aws:kms:us-east-1:*:key/*"
      ]
  }
    statement {
      effect = "Allow"
      actions = [
        "s3:GetObject",
        "s3:GetObjectVersion",
        "s3:GetBucketVersioning",
        "s3:PutObject",
        "s3:ListBucketVersions",
        "s3:GetObjectTagging",
        "s3:ListBucket",
        "s3:ListBucket",
        "s3:GetBucketLocation",
        "s3:GetObjectAcl",
        "s3:PutObjectAcl",
        "s3:DeleteObject",
        "s3:GetBucketAcl",
        "s3:PutBucketVersioning"
        ]

      resources = [
        "arn:aws:s3:::*"
      ]
    }
    statement {
      effect = "Allow"
      actions = [
        "codebuild:*",
        "codedeploy:*",
        "s3:*"
      ]
      resources = [
        "*"
      ]
    }
    statement {
            effect= "Allow"
            actions= [
                "autoscaling:AttachLoadBalancers",
                "autoscaling:EnableMetricsCollection",
                "ec2:TerminateInstances",
                "autoscaling:ResumeProcesses",
                "autoscaling:PutLifecycleHook",
                "autoscaling:SuspendProcesses",
                "autoscaling:PutScheduledUpdateGroupAction",
                "autoscaling:AttachLoadBalancerTargetGroups",
                "autoscaling:PutWarmPool",
                "autoscaling:CompleteLifecycleAction",
                "autoscaling:PutScalingPolicy",
                "autoscaling:UpdateAutoScalingGroup",
                "autoscaling:DeleteAutoScalingGroup",
                "autoscaling:DeleteLifecycleHook",
                "autoscaling:CreateAutoScalingGroup",
                "autoscaling:PutNotificationConfiguration",
                "autoscaling:RecordLifecycleActionHeartbeat"
            ]
            resources= [
                "arn:aws:autoscaling:${module.adl_globals.current_region}:${module.adl_globals.account_id}:autoScalingGroup:*:autoScalingGroupName/*",
                "arn:aws:ec2:${module.adl_globals.current_region}:${module.adl_globals.account_id}:instance/*"
            ]
        }
      statement {
            effect= "Allow"
            actions = [
                "ec2:DescribeInstances",
                "autoscaling:DescribeScalingActivities",
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribePolicies",
                "autoscaling:DescribeScheduledActions",
                "autoscaling:DescribeNotificationConfigurations",
                "autoscaling:DescribeLifecycleHooks",
                "ec2:DescribeInstanceStatus"
            ]
            resources = ["*"]
        }
}
    
    



resource "aws_iam_role_policy" "codepipeline_policy" {
  name = format("%s-%s-%s-codepipeline-policy", var.application, module.adl_globals.environment,var.service)
  role = aws_iam_role.codepipeline_role.id
  policy = data.aws_iam_policy_document.codepipeline_role_policy_document.json
}


######################## CodeDeploy Role

# data "aws_iam_policy_document" "codebuild_assume_role_policy" {
#   statement {
#     effect  = "Allow"
#     actions = ["sts:AssumeRole"]

#     principals {
#       type        = "Service"
#       identifiers = ["codebuild.amazonaws.com","iam.amazonaws.com","codedeploy.amazonaws.com"]
#     }
#   }
# }

# resource "aws_iam_role" "cp_codedeploy_role" {
#   name = format("%s-%s-%s-codedeploy-role", var.application, module.adl_globals.environment,var.codepipelinename)
#   path = "/"
#   tags = var.tags
#   assume_role_policy = data.aws_iam_policy_document.codebuild_assume_role_policy.json
# }

# # resource "aws_iam_role_policy" "codedeploy_policy" {
# #   name = format("%s-%s-%s-codepipeline-policy", var.application, module.adl_globals.environment,var.service)
# #   role = aws_iam_role.codepipeline_role.id
# #   policy = data.aws_iam_policy_document.codedeploy_role_policy_document.json
# # }


# # data "aws_iam_policy_document" "codedeploy_role_policy_document" {

# #   statement {
# #     effect = "Allow"
# #     actions = [
# #         "kms:Encrypt",
# #         "kms:Decrypt",
# #         "kms:GenerateDataKey",
# #         "kms:GenerateDataKey*"                
# #       ]
# #     resources = [
# #       "arn:aws:kms:us-east-1:427130756745:key/*"
# #     ]
# #   }
# #   statement {
# #     effect = "Allow"
# #     actions = [
# #       "s3:GetObject",
# #       "s3:GetObjectVersion",
# #       "s3:GetBucketVersioning",
# #       "s3:PutObject",
# #       "s3:ListBucketVersions",
# #       "s3:GetObjectTagging",
# #       "s3:ListBucket",
# #       "s3:ListBucket",
# #       "s3:GetBucketLocation",
# #       "s3:GetObjectAcl",
# #       "s3:PutObjectAcl",
# #       "s3:DeleteObject",
# #       "s3:GetBucketAcl",
# #       "s3:PutBucketVersioning"
# #       ]

# #     resources = [
# #       "arn:aws:s3:::*"
# #     ]
# #   }
# #   statement {
# #     effect = "Allow"
# #     actions = [
# #       "codebuild:*",
# #       "codedeploy:*",
# #       "s3:*"
# #     ]
# #     resources = [
# #       "*"
# #     ]
# #   }

# # }


# resource "aws_iam_role_policy_attachment" "ec2_pipeline_role_policy" {
    
#     depends_on = [
#       aws_iam_policy.ec2_pipeline_ec2_policy
#     ]
#   role  = aws_iam_role.cp_codedeploy_role.name
#   policy_arn = aws_iam_policy.ec2_pipeline_ec2_policy.arn
# }

# resource "aws_iam_policy" "ec2_pipeline_ec2_policy" {
#   #name        = format("%s-%s", local.alight_std_name,var.codedeploy_ec2_policy)
#   path        = "/"
#   description = "IAM policy for logging from a lambda"

#   policy = <<EOF
# {
#     "Version": "2012-10-17",
#     "Statement": [
#         {
#             "Sid": "VisualEditor0",
#             "Effect": "Allow",
#             "Action": [
#                 "autoscaling:AttachLoadBalancers",
#                 "autoscaling:EnableMetricsCollection",
#                 "ec2:TerminateInstances",
#                 "autoscaling:ResumeProcesses",
#                 "autoscaling:PutLifecycleHook",
#                 "autoscaling:SuspendProcesses",
#                 "autoscaling:PutScheduledUpdateGroupAction",
#                 "autoscaling:AttachLoadBalancerTargetGroups",
#                 "autoscaling:PutWarmPool",
#                 "autoscaling:CompleteLifecycleAction",
#                 "autoscaling:PutScalingPolicy",
#                 "autoscaling:UpdateAutoScalingGroup",
#                 "autoscaling:DeleteAutoScalingGroup",
#                 "autoscaling:DeleteLifecycleHook",
#                 "autoscaling:CreateAutoScalingGroup",
#                 "autoscaling:PutNotificationConfiguration",
#                 "autoscaling:RecordLifecycleActionHeartbeat"
#             ],
#             "Resource": [
#                 "arn:aws:autoscaling:${module.adl_globals.current_region}:${module.adl_globals.account_id}:autoScalingGroup:*:autoScalingGroupName/*",
#                 "arn:aws:ec2:${module.adl_globals.current_region}:${module.adl_globals.account_id}:instance/*"
#             ]
#         },
#         {
#             "Sid": "VisualEditor1",
#             "Effect": "Allow",
#             "Action": [
#                 "ec2:DescribeInstances",
#                 "autoscaling:DescribeScalingActivities",
#                 "autoscaling:DescribeAutoScalingGroups",
#                 "autoscaling:DescribePolicies",
#                 "autoscaling:DescribeScheduledActions",
#                 "autoscaling:DescribeNotificationConfigurations",
#                 "autoscaling:DescribeLifecycleHooks",
#                 "ec2:DescribeInstanceStatus"
#             ],
#             "Resource": "*"
#         }
#     ]
# }
# EOF
# }

# Event rules

data "aws_iam_policy_document" "events_assume_role_policy" {
  statement {
    effect  = "Allow"
    actions = ["sts:AssumeRole"]

    principals {
      type        = "Service"
      identifiers = ["events.amazonaws.com"]
    }
  }
}

resource "aws_iam_role" "cwe_codepipeline_role" {
  name = format("%s-%s-%s-cwe-codepipeline-role", var.application, module.adl_globals.environment,var.codepipelinename)
  path = "/"
  tags = var.tags
  assume_role_policy = data.aws_iam_policy_document.events_assume_role_policy.json

  inline_policy {
    name = "codepipelineExecution"
    policy = data.aws_iam_policy_document.inline_policy.json
  }
}

data "aws_iam_policy_document" "inline_policy" {
  statement {
    actions = ["codepipeline:StartPipelineExecution"]
    resources = [aws_codepipeline.codepipeline.arn]
  }
}

resource "aws_cloudwatch_event_rule" "console" {
  name        = "capture-cicd-event-${var.codepipelinename}"
  description = "Capture S3 Object PUT Opeation"

  event_pattern = templatefile("${path.module}/event.tpl", {
    source_s3_bucket = var.source_s3_bucket
    key = format("cicd/codedeploy/%s/%s/%s", var.service,var.repo_name,var.build_code)
  })
  
  }

resource "aws_cloudwatch_event_target" "code_pipeline" {
  rule = aws_cloudwatch_event_rule.console.name
  target_id = "SendToCodePipeline"
  arn = aws_codepipeline.codepipeline.arn
  role_arn = aws_iam_role.cwe_codepipeline_role.arn

}



