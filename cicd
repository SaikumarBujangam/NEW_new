terraform {
  experiments = [module_variable_optional_attrs]
}

module "kms" {
  source = "git::codecommit://module-aws-kms?ref=v1"
  kms_key_alias = var.kms_key_alias
}

module "network" {
  source = "git::codecommit://module-aws-network-data?ref=v2"
  vpc_group = var.vpc_group
  vpc_tier  = var.vpc_tier
}

locals {
  efs_name     = var.service != null ? "${var.application}-${var.service}-${var.environment}-efs" : "${var.application}-${var.environment}-efs"
  BackupName   = var.backup_name != "" ? var.backup_name : "${local.efs_name}-backup"
}

resource "aws_efs_file_system" "efs" {
  creation_token  = local.efs_name
  encrypted       = true
  kms_key_id      = var.kms_key_arn == "" ? module.kms.kms_key_arn : var.kms_key_arn
  throughput_mode = "bursting"
  tags            = merge(var.tags, { Name = local.efs_name, BackupPlan = var.backup_plan, BackupName = var.backup_name != "" ? var.backup_name : local.BackupName }) 
 
}

resource "aws_efs_backup_policy" "policy" {
  file_system_id = aws_efs_file_system.efs.id
  backup_policy {
    status = var.backup_plan != "" && var.backup_plan != "none" ? "ENABLED" : "DISABLED"
  }
}

resource "aws_efs_access_point" "efs_access_point" {
  count          = length(var.access_points)
  file_system_id = aws_efs_file_system.efs.id
  posix_user {
    gid = var.access_points[count.index].gid != null ? var.access_points[count.index].gid : 0
    uid = var.access_points[count.index].uid != null ? var.access_points[count.index].uid : 0
  }
  root_directory {
    path = var.access_points[count.index].path

    creation_info {
      owner_gid   = var.access_points[count.index].gid != null ? var.access_points[count.index].gid : 0
      owner_uid   = var.access_points[count.index].uid != null ? var.access_points[count.index].uid : 0
      permissions = var.access_points[count.index].permissions != null ? var.access_points[count.index].permissions : 755
    }
  }
}

resource "aws_efs_mount_target" "mount_target" {
  count           = length(module.network.subnet_class_map[var.subnet_type])
  file_system_id  = aws_efs_file_system.efs.id
  subnet_id       = module.network.subnet_class_map[var.subnet_type][count.index]
  security_groups = [aws_security_group.efs.id]

  depends_on = [aws_security_group.efs]
}

resource "aws_security_group" "efs" {
  name   = local.efs_name
  vpc_id = module.network.vpc_id
}

resource "aws_security_group_rule" "ingress_to_ec2" {
  count                    = length(var.ingress_security_group_ids)
  from_port                = 2049
  protocol                 = "TCP"
  security_group_id        = aws_security_group.efs.id
  to_port                  = 2049
  type                     = "ingress"
  source_security_group_id = var.ingress_security_group_ids[count.index]
}

resource "aws_security_group_rule" "egress_from_ec2" {
  count                    = length(var.ingress_security_group_ids)
  from_port                = 2049
  protocol                 = "TCP"
  security_group_id        = var.ingress_security_group_ids[count.index]
  to_port                  = 2049
  type                     = "egress"
  source_security_group_id = aws_security_group.efs.id
}

resource "aws_security_group_rule" "datasync_ingress_rule" {
  count             = var.backup_plan != "" ? 1 : 0
  type              = "ingress"
  description       = "Ingress rule needed for DataSync tasks"
  security_group_id = aws_security_group.efs.id
  from_port         = 2049
  protocol          = "TCP"
  to_port           = 2049
  self              = true
}

resource "aws_security_group_rule" "datasync_egress_rule" {
  count             = var.backup_plan != "" ? 1 : 0
  type              = "egress"
  description       = "Egress rule needed for DataSync tasks"
  security_group_id = aws_security_group.efs.id
  from_port         = 2049
  protocol          = "TCP"
  to_port           = 2049
  cidr_blocks       = ["0.0.0.0/0"]
}

data "aws_efs_access_points" "access_point_objects" {
  count = length(var.access_points) > 0 ? 1 : 0
  file_system_id = aws_efs_file_system.efs.id
  depends_on = [ aws_efs_access_point.efs_access_point ]
}
